import os
import re
import json
import time
import random
import requests
import pytz
import pandas as pd
from datetime import datetime
from typing import List, Tuple, Dict, Any

# --- Constants and Configuration ---

# If the user has set an environment variable, it will be used.
OPENWEATHER_API_KEY = os.environ.get(
    "OPENWEATHER_API_KEY", "c55ccdd65d09909976428698e8da16ec"
)
LINE_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_API_URL = "https://api.line.me/v2/bot/message/broadcast"

# Data Source URLs
TMD_RADAR_URL = "https://weather.tmd.go.th/chaophraya.php"
SINGBURI_URL = "https://singburi.thaiwater.net/wl"
DISCHARGE_URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'

# Location Coordinates for Pho Nang Dam Ok
WEATHER_LAT = 15.120
WEATHER_LON = 100.283

# Thai month mapping for Excel data
THAI_MONTHS = {
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°':1, '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå':2, '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°':3, '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô':4,
    '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°':5, '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô':6, '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°':7, '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°':8,
    '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô':9, '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°':10, '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô':11, '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°':12
}


# --- NEW: Enhanced Weather Analysis Functions (Based on Suggestions) ---

def improved_weather_description(
    code: int, precipitation: float, temp_max: float
) -> str:
    """
    Improved weather code translation with more detailed and tropical-specific logic.
    Considers precipitation thresholds and extreme heat.
    """
    # Thunderstorm
    if code in {95, 96, 99}:
        return "‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á"
    # Rain (adjusted thresholds for tropical climate)
    if code in {51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 80, 81, 82}:
        if precipitation >= 20.0:
            return "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å"
        elif precipitation >= 10.0:
            return "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"
        elif precipitation >= 5.0:
            return "‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            return "‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    # Heat warnings
    if code <= 3: # Clear or partly cloudy
        if temp_max >= 37.0:
            return "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"
        elif temp_max >= 35.0:
            return "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô"
    # General cases
    if code == 0:
        return "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™"
    if code in {1, 2, 3}:
        return "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà"
    if code in {45, 48}:
        return "‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å"
    if code in {71, 73, 75, 77, 85, 86}:
        return "‡∏´‡∏¥‡∏°‡∏∞" # Unlikely but kept for completeness
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ"


def get_openweather_data(lat: float, lon: float, api_key: str) -> Dict[str, Any] | None:
    """Fetches current day forecast data from OpenWeather."""
    try:
        url = (
            f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}"
            f"&appid={api_key}&units=metric"
        )
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        data = resp.json()

        analysis = {'temp_max': -999.0, 'rain_chance_time': None, 'humidity': 0}
        tz = pytz.timezone("Asia/Bangkok")
        today_str = datetime.now(tz).strftime("%Y-%m-%d")
        
        entry_count = 0
        total_humidity = 0

        for entry in data.get("list", []):
            if today_str not in entry.get("dt_txt", ""):
                continue
            
            main_data = entry.get("main", {})
            temp = main_data.get("temp")
            humidity = main_data.get("humidity")

            if temp is not None and temp > analysis['temp_max']:
                analysis['temp_max'] = temp
            
            if humidity is not None:
                total_humidity += humidity
                entry_count += 1

            weather = entry.get("weather", [])
            if weather and analysis['rain_chance_time'] is None:
                weather_id = weather[0].get("id")
                # Detects thunderstorms (2xx) or rain (5xx)
                if 200 <= weather_id < 600:
                    analysis['rain_chance_time'] = entry.get("dt_txt", "")[11:16]
        
        if entry_count > 0:
            analysis['humidity'] = total_humidity / entry_count

        return analysis
    except Exception as e:
        print(f"‚ùå ERROR: get_openweather_data: {e}")
        return None


def get_tmd_radar_nowcast(target_area: str = "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó") -> Dict[str, Any] | None:
    """
    Provides a short-term rain 'nowcast' from TMD radar page.
    Returns a dictionary indicating if rain is detected.
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(TMD_RADAR_URL, headers=headers, timeout=20)
        response.raise_for_status()
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')
        page_text = soup.get_text()

        if target_area in page_text:
            # Check for specific keywords indicating rain
            if "‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" in page_text or "‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å" in page_text:
                return {"rain_incoming": True, "intensity": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡∏±‡∏Å"}
        return {"rain_incoming": False}
    except Exception as e:
        print(f"‚ùå ERROR: get_tmd_radar_nowcast: {e}")
        return None

def calculate_heat_index(temp_c: float, humidity: float) -> float:
    """Estimates the heat index (feels-like temperature). Simplified formula."""
    if temp_c < 26.7: # Heat index is typically not calculated for lower temps
        return temp_c
        
    # Simplified formula, for approximation
    heat_index = -8.78469475556 + 1.61139411 * temp_c + 2.33854883889 * humidity + \
                 -0.14611605 * temp_c * humidity + -0.012308094 * (temp_c**2) + \
                 -0.0164248277778 * (humidity**2) + 0.002211732 * (temp_c**2) * humidity + \
                 0.00072546 * temp_c * (humidity**2) + \
                 -0.000003582 * (temp_c**2) * (humidity**2)
    return heat_index

def get_local_weather_advice(analysis: Dict[str, Any]) -> str | None:
    """Generates specific advice based on the weather analysis."""
    advice = []
    # Advice for farmers on heat
    if analysis.get('temp_max', 0) > 35:
        advice.append("üåæ ‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤: ‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ä‡πà‡∏ß‡∏á 10:00-15:00 ‡∏ô.")
    # Advice for riverside residents
    if analysis.get('rain_incoming'):
         advice.append("üìç ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏¥‡∏°‡∏ô‡πâ‡∏≥: ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å")
    return " ‚Ä¢ ".join(advice) if advice else None

def get_enhanced_weather_alert(lat: float, lon: float) -> str:
    """
    Generates a comprehensive and actionable weather alert by combining
    data from OpenWeather and TMD radar.
    """
    try:
        # Step 1: Fetch data from all available sources
        openweather_data = get_openweather_data(lat, lon, OPENWEATHER_API_KEY)
        radar_data = get_tmd_radar_nowcast(target_area="‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó")
        
        # Step 2: Analyze and combine data
        if not openweather_data:
            return "‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ"

        messages = []
        
        # Radar Nowcast (highest priority)
        if radar_data and radar_data.get('rain_incoming'):
            messages.append(
                f"üõ∞Ô∏è ‡πÄ‡∏£‡∏î‡∏≤‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ù‡∏ô'‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á{radar_data['intensity']}'"
                f"‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì ‡∏à.‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ù‡∏ô‡∏ï‡∏Å‡πÉ‡∏ô 1-2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏µ‡πâ"
            )
            
        # Temperature and Heat Index Alert
        temp_max = openweather_data.get('temp_max', 0)
        humidity = openweather_data.get('humidity', 0)
        if temp_max >= 37.0:
            heat_index = calculate_heat_index(temp_max, humidity)
            messages.append(
                f"üå°Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î! ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {temp_max:.1f}¬∞C "
                f"(‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô {heat_index:.1f}¬∞C)"
            )
            messages.append("üíß ‡∏Ñ‡∏ß‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á")
        elif temp_max >= 35.0:
            messages.append(f"üå°Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô! ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {temp_max:.1f}¬∞C")

        # Rain forecast from OpenWeather (if radar doesn't show immediate rain)
        rain_time = openweather_data.get('rain_chance_time')
        if rain_time and not (radar_data and radar_data.get('rain_incoming')):
            messages.append(f"üå¶Ô∏è ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ù‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {rain_time} ‡∏ô.")
            
        # Add local advice
        local_advice = get_local_weather_advice({
            "temp_max": temp_max,
            "rain_incoming": radar_data.get('rain_incoming') if radar_data else False
        })
        if local_advice:
            messages.append(f"\n‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n{local_advice}")

        return "\n".join(messages) if messages else "‚Ä¢ ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"

    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {e}"


# --- Core Data Fetching Functions (Largely Unchanged) ---

def get_historical_from_excel(year_be: int) -> int | None:
    path = f"data/‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏µ{year_be}.xlsx"
    try:
        if not os.path.exists(path):
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà: {path}")
            return None
        df = pd.read_excel(path)
        df = df.rename(columns={'‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)': 'discharge'})
        df['month_num'] = df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].map(THAI_MONTHS)
        now = datetime.now(pytz.timezone('Asia/Bangkok'))
        today_d, today_m = now.day, now.month
        match = df[(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']==today_d) & (df['month_num']==today_m)]
        if not match.empty:
            discharge_val = int(match.iloc[0]['discharge'])
            print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏µ {year_be}: {discharge_val} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            return discharge_val
        else:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {today_d}/{today_m} ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏µ {year_be}")
            return None
    except Exception as e:
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ({path}): {e}")
        return None

def get_sapphaya_data(retries: int = 3):
    api_url = "https://api-v3.thaiwater.net/api/v1/thaiwater30/public/waterlevel?province_code=18"
    for attempt in range(retries):
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            response = requests.get(api_url, headers=headers, timeout=15)
            response.raise_for_status()
            data = response.json().get("data", [])
            for item in data:
                if (item.get("station", {}).get("tele_station_name", {}).get("th") == "‡∏™‡∏£‡∏£‡∏û‡∏¢‡∏≤" and
                    item.get("geocode", {}).get("tumbon_name", {}).get("th") == "‡πÇ‡∏û‡∏ô‡∏≤‡∏á‡∏î‡∏≥‡∏≠‡∏≠‡∏Å"):
                    water_level = float(item.get("waterlevel_msl"))
                    bank_level = 13.87 # Fixed value
                    print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏£‡∏û‡∏¢‡∏≤: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥={water_level}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á={bank_level}")
                    return water_level, bank_level
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ '‡∏™‡∏£‡∏£‡∏û‡∏¢‡∏≤' ‡∏ó‡∏µ‡πà ‡∏ï.‡πÇ‡∏û‡∏ô‡∏≤‡∏á‡∏î‡∏≥‡∏≠‡∏≠‡∏Å ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}")
        except Exception as e:
            print(f"‚ùå ERROR: get_sapphaya_data (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}): {e}")
        if attempt < retries - 1:
            time.sleep(3)
    return None, None

def fetch_chao_phraya_dam_discharge(url: str):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        }
        response = requests.get(f"{url}?cb={random.randint(10000, 99999)}", headers=headers, timeout=20)
        response.raise_for_status()
        response.encoding = 'utf-8'
        match = re.search(r'var json_data = (\[.*\]);', response.text)
        if not match:
            print("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö JSON ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤")
            return None
        data = json.loads(match.group(1))
        # Navigate through the specific JSON structure for dam C13
        value = float(data[0]['itc_water']['C13']['storage'])
        print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {value}")
        return value
    except Exception as e:
        print(f"‚ùå ERROR: fetch_chao_phraya_dam_discharge: {e}")
    return None


# --- Message Creation & Sending ---

def analyze_and_create_message(
    water_level: float, dam_discharge: float, bank_height: float,
    hist_2567: int | None, hist_2554: int | None
) -> str:
    distance_to_bank = bank_height - water_level
    if dam_discharge > 2400 or distance_to_bank < 1.0:
        ICON, HEADER = "üü•", "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚ÄºÔ∏è"
        summary = ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", "1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏û‡∏¢‡∏û‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
                   "2. ‡∏Ç‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô", "3. ‡∏á‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏à‡∏£‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥"]
    elif dam_discharge > 1800 or distance_to_bank < 2.0:
        ICON, HEADER = "üü®", "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á ‚ÄºÔ∏è"
        summary = ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", "1. ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏£‡∏¥‡∏°‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ô‡∏≠‡∏Å‡∏Ñ‡∏±‡∏ô‡∏Å‡∏±‡πâ‡∏ô‡∏ô‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á",
                   "2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î"]
    else:
        ICON, HEADER = "üü©", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥"
        summary = [f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏¢‡∏±‡∏á‡∏´‡πà‡∏≤‡∏á‡∏ï‡∏•‡∏¥‡πà‡∏á {distance_to_bank:.2f} ‡∏°. ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ \"‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\" ‚úÖ",
                   "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö"]

    now = datetime.now(pytz.timezone("Asia/Bangkok"))
    msg = [
        f"{ICON} {HEADER}",
        f"üìç ‡∏ï.‡πÇ‡∏û‡∏ô‡∏≤‡∏á‡∏î‡∏≥‡∏≠‡∏≠‡∏Å ‡∏≠.‡∏™‡∏£‡∏£‡∏û‡∏¢‡∏≤ ‡∏à.‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó",
        f"üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now.strftime('%d/%m/%Y %H:%M')} ‡∏ô.",
        "",
        "üåä **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ + ‡∏ï‡∏•‡∏¥‡πà‡∏á**",
        f"‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: {water_level:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.",
        f"‚Ä¢ ‡∏ï‡∏•‡∏¥‡πà‡∏á: {bank_height:.2f} ‡∏°.‡∏£‡∏ó‡∏Å. (‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {distance_to_bank:.2f} ‡∏°.)",
        "",
        "üíß **‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤**",
        f"‚Ä¢ {dam_discharge:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
        "",
        "üìä **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ì ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)**",
        f"‚Ä¢ ‡∏õ‡∏µ 2567: {hist_2567:,} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" if hist_2567 else "‚Ä¢ ‡∏õ‡∏µ 2567: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        f"‚Ä¢ ‡∏õ‡∏µ 2554: {hist_2554:,} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" if hist_2554 else "‚Ä¢ ‡∏õ‡∏µ 2554: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "",
        "üßæ **‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå**",
        *summary
    ]
    return "\n".join(msg)

def create_error_message(station_status: str, discharge_status: str) -> str:
    now = datetime.now(pytz.timezone('Asia/Bangkok'))
    return (
        f"‚öôÔ∏è‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å ‚ùå‚öôÔ∏è\n"
        f"‡πÄ‡∏ß‡∏•‡∏≤: {now.strftime('%d/%m/%Y %H:%M')} ‡∏ô.\n\n"
        f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏£‡∏£‡∏û‡∏¢‡∏≤: {station_status}\n"
        f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {discharge_status}\n\n"
        f"‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
    )

def send_line_broadcast(message: str):
    if not LINE_TOKEN:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_CHANNEL_ACCESS_TOKEN! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
        return
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {LINE_TOKEN}"}
    payload = {"messages": [{"type": "text", "text": message}]}
    try:
        res = requests.post(LINE_API_URL, headers=headers, json=payload, timeout=10)
        res.raise_for_status()
        print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Broadcast ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ERROR: LINE Broadcast: {e.response.text if hasattr(e, 'response') else e}")

# --- Main Execution ---

if __name__ == "__main__":
    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) ===")
    
    # --- 1. Fetch Core Water Data ---
    print("\nüíß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô...")
    water_level, bank_level = get_sapphaya_data()
    dam_discharge = fetch_chao_phraya_dam_discharge(DISCHARGE_URL)
    hist_2567 = get_historical_from_excel(2567)
    hist_2554 = get_historical_from_excel(2554)

    # --- 2. Build Core Water Message ---
    if all([water_level, bank_level, dam_discharge]):
        core_message = analyze_and_create_message(
            water_level, dam_discharge, bank_level, hist_2567, hist_2554
        )
    else:
        station_status = "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if water_level is not None else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        discharge_status = "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if dam_discharge is not None else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        core_message = create_error_message(station_status, discharge_status)

    # --- 3. Build Enhanced Weather Message ---
    print("\nüå¶Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®...")
    weather_section = (
        "üå°Ô∏è **‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ**\n" +
        get_enhanced_weather_alert(WEATHER_LAT, WEATHER_LON)
    )
    
    # --- 4. Assemble Final Message for LINE ---
    final_message = (
        f"{core_message}\n\n"
        f"{weather_section}\n\n"
        f"‡∏ó‡∏µ‡πà‡∏°‡∏≤: ‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏•‡∏ï‡∏≥‡∏ö‡∏•‡πÇ‡∏û‡∏ô‡∏≤‡∏á‡∏î‡∏≥‡∏≠‡∏≠‡∏Å"
    )

    print("\nüì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:")
    print("-" * 40)
    print(final_message)
    print("-" * 40)
    
    # --- 5. Send to LINE ---
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE...")
    send_line_broadcast(final_message)
    
    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
